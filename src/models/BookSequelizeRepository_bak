import { Book } from "../database/models/books.model";
import SequelizeBaseRepository from "../repository/SequelizeBaseRepository";
import { IBook } from "./IBook";

export default class BookSequelizeRepository extends SequelizeBaseRepository<IBook> {

  async find(item?: Partial<IBook> | undefined): Promise<IBook[]> {
    const response = await Book.findAll({
      where: item,
    });
    const result = response.map((item) => item.dataValues);
    return result as unknown as IBook[];
  }

  async findOne(item: Partial<IBook>): Promise<IBook> {
    const response = await Book.findOne({ where: item });
    return response?.dataValues as IBook;
  }

  create(item: Partial<IBook>): Promise<number> {
    throw new Error("Method not implemented.");
  }

  update(id: number, item: Partial<IBook>): Promise<boolean> {
    throw new Error("Method not implemented.");
  }

  delete(id: number): Promise<boolean> {
    throw new Error("Method not implemented.");
  }

}