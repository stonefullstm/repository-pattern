import BaseRepository from "./BaseRepository";
import { ModelStatic } from "./modelStatic";

export default abstract class SequelizeBaseRepository<T> extends BaseRepository<T> {
  constructor(
    protected _model: ModelStatic,
    protected _id: string
  ) {
    super();
  };

  async find(item?: Partial<T> | undefined): Promise<T[]> {
    const response = await this._model.findAll({
      where: item,
    });
    const result = response.map((item) => item.dataValues);
    return result as unknown as T[];
  }

  async findOne(id: number): Promise<T> {
    const {dataValues} = await this._model.findByPk(id);
    return dataValues;
  }

  async delete(id: number): Promise<boolean> {
    // const model = this._model.getAttributes();
    // const keys = Object.keys(model) as (keyof typeof model)[];
    // const index = keys.findIndex((key) => key === this._id);
    const objKey = {};
    // objKey[keys[index]] = id;
    objKey[this._id] = id;
    const deletedQty = await this._model.destroy({
      where: objKey
    })
    return (deletedQty > 0);
    
  }

}